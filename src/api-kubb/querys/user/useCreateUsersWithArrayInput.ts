/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { CreateUsersWithArrayInputMutationRequest, CreateUsersWithArrayInputMutationResponse } from '../../models/CreateUsersWithArrayInput.ts'
import { useMutation } from '@tanstack/react-query'

export const createUsersWithArrayInputMutationKey = () => [{ url: '/user/createWithArray' }] as const

export type CreateUsersWithArrayInputMutationKey = ReturnType<typeof createUsersWithArrayInputMutationKey>

/**
 * @summary Creates list of users with given input array
 * {@link /user/createWithArray}
 */
export async function createUsersWithArrayInput(
  data?: CreateUsersWithArrayInputMutationRequest,
  config: Partial<RequestConfig<CreateUsersWithArrayInputMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CreateUsersWithArrayInputMutationResponse, ResponseErrorConfig<Error>, CreateUsersWithArrayInputMutationRequest>({
    method: 'POST',
    url: `/user/createWithArray`,
    baseURL: 'https://petstore.swagger.io/v2',
    data,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Creates list of users with given input array
 * {@link /user/createWithArray}
 */
export function useCreateUsersWithArrayInput<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateUsersWithArrayInputMutationResponse,
      ResponseErrorConfig<Error>,
      { data?: CreateUsersWithArrayInputMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateUsersWithArrayInputMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? createUsersWithArrayInputMutationKey()

  return useMutation<CreateUsersWithArrayInputMutationResponse, ResponseErrorConfig<Error>, { data?: CreateUsersWithArrayInputMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return createUsersWithArrayInput(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}